# coding: utf-8

"""
    MEC-RM API

    This is the MEC Recource Manager API specification.  Current Version: v0.5.0.2 (Major: 0.5, Minor: 0, Patch: 2)  As a general-purpose stateless middleware, we have designed this system with a high level of flexibility. There is no predefined API invocation flow in this system. Application developers have the freedom to creatively develop different invocation flows based on their specific needs. In fact, this application-centric flexible development is what we advocate and one of the main driving forces behind our transition from RPC-based APIs to stateless APIs.  The document covers not-fixed fields which may not compatable between versions. (espesilly version change greater than minor version)  For implement of non-published APIs, you can reference the source code by your own responsibility.  ## Documents: * [API Document](https://mecdoc.dolylab.cc/)  # noqa: E501

    OpenAPI spec version: v0.5.0.2
    Contact: nb22509@shibaura-it.ac.jp
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class KVApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def pleades_kv_create(self, **kwargs):  # noqa: E501
        """Create new Key-Value storage domain object.  # noqa: E501

        Not Implemented Yet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pleades_kv_create(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pleades_kv_create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.pleades_kv_create_with_http_info(**kwargs)  # noqa: E501
            return data

    def pleades_kv_create_with_http_info(self, **kwargs):  # noqa: E501
        """Create new Key-Value storage domain object.  # noqa: E501

        Not Implemented Yet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pleades_kv_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pleades_kv_create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/kv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pleades_kv_delete(self, h_id, key, **kwargs):  # noqa: E501
        """DEL method (DELETE {key})  # noqa: E501

        Not Implemented Yet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pleades_kv_delete(h_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int h_id: KV Storage ID (required)
        :param str key: KV Storage Key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pleades_kv_delete_with_http_info(h_id, key, **kwargs)  # noqa: E501
        else:
            (data) = self.pleades_kv_delete_with_http_info(h_id, key, **kwargs)  # noqa: E501
            return data

    def pleades_kv_delete_with_http_info(self, h_id, key, **kwargs):  # noqa: E501
        """DEL method (DELETE {key})  # noqa: E501

        Not Implemented Yet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pleades_kv_delete_with_http_info(h_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int h_id: KV Storage ID (required)
        :param str key: KV Storage Key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['h_id', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pleades_kv_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'h_id' is set
        if ('h_id' not in params or
                params['h_id'] is None):
            raise ValueError("Missing the required parameter `h_id` when calling `pleades_kv_delete`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `pleades_kv_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'h_id' in params:
            path_params['hID'] = params['h_id']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/kv/{hID}/field/{key}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pleades_kv_get(self, h_id, key, **kwargs):  # noqa: E501
        """GET method of KV storage (GET {key})  # noqa: E501

        Not Implemented Yet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pleades_kv_get(h_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int h_id: KV Storage ID (required)
        :param str key: KV Storage Key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pleades_kv_get_with_http_info(h_id, key, **kwargs)  # noqa: E501
        else:
            (data) = self.pleades_kv_get_with_http_info(h_id, key, **kwargs)  # noqa: E501
            return data

    def pleades_kv_get_with_http_info(self, h_id, key, **kwargs):  # noqa: E501
        """GET method of KV storage (GET {key})  # noqa: E501

        Not Implemented Yet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pleades_kv_get_with_http_info(h_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int h_id: KV Storage ID (required)
        :param str key: KV Storage Key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['h_id', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pleades_kv_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'h_id' is set
        if ('h_id' not in params or
                params['h_id'] is None):
            raise ValueError("Missing the required parameter `h_id` when calling `pleades_kv_get`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `pleades_kv_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'h_id' in params:
            path_params['hID'] = params['h_id']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/kv/{hID}/field/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pleades_kv_info(self, h_id, **kwargs):  # noqa: E501
        """Get KV-Storage object meta data  # noqa: E501

        Not Implemented Yet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pleades_kv_info(h_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int h_id: KV Storage ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pleades_kv_info_with_http_info(h_id, **kwargs)  # noqa: E501
        else:
            (data) = self.pleades_kv_info_with_http_info(h_id, **kwargs)  # noqa: E501
            return data

    def pleades_kv_info_with_http_info(self, h_id, **kwargs):  # noqa: E501
        """Get KV-Storage object meta data  # noqa: E501

        Not Implemented Yet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pleades_kv_info_with_http_info(h_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int h_id: KV Storage ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['h_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pleades_kv_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'h_id' is set
        if ('h_id' not in params or
                params['h_id'] is None):
            raise ValueError("Missing the required parameter `h_id` when calling `pleades_kv_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'h_id' in params:
            path_params['hID'] = params['h_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/kv/{hID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pleades_kv_set(self, h_id, key, **kwargs):  # noqa: E501
        """SET method of KV storage (SET {key} {body})  # noqa: E501

        Not Implemented Yet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pleades_kv_set(h_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int h_id: KV Storage ID (required)
        :param str key: KV Storage Key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pleades_kv_set_with_http_info(h_id, key, **kwargs)  # noqa: E501
        else:
            (data) = self.pleades_kv_set_with_http_info(h_id, key, **kwargs)  # noqa: E501
            return data

    def pleades_kv_set_with_http_info(self, h_id, key, **kwargs):  # noqa: E501
        """SET method of KV storage (SET {key} {body})  # noqa: E501

        Not Implemented Yet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pleades_kv_set_with_http_info(h_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int h_id: KV Storage ID (required)
        :param str key: KV Storage Key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['h_id', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pleades_kv_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'h_id' is set
        if ('h_id' not in params or
                params['h_id'] is None):
            raise ValueError("Missing the required parameter `h_id` when calling `pleades_kv_set`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `pleades_kv_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'h_id' in params:
            path_params['hID'] = params['h_id']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/kv/{hID}/field/{key}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pleiades_kv_flush(self, h_id, **kwargs):  # noqa: E501
        """Remove all keys (FLUSH)  # noqa: E501

        Not Implemented Yet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pleiades_kv_flush(h_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int h_id: KV Storage ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pleiades_kv_flush_with_http_info(h_id, **kwargs)  # noqa: E501
        else:
            (data) = self.pleiades_kv_flush_with_http_info(h_id, **kwargs)  # noqa: E501
            return data

    def pleiades_kv_flush_with_http_info(self, h_id, **kwargs):  # noqa: E501
        """Remove all keys (FLUSH)  # noqa: E501

        Not Implemented Yet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pleiades_kv_flush_with_http_info(h_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int h_id: KV Storage ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['h_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pleiades_kv_flush" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'h_id' is set
        if ('h_id' not in params or
                params['h_id'] is None):
            raise ValueError("Missing the required parameter `h_id` when calling `pleiades_kv_flush`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'h_id' in params:
            path_params['hID'] = params['h_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/kv/{hID}/field', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pleiades_kv_keys(self, h_id, **kwargs):  # noqa: E501
        """Get all keys (KEYS)  # noqa: E501

        Not Implemented Yet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pleiades_kv_keys(h_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int h_id: KV Storage ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pleiades_kv_keys_with_http_info(h_id, **kwargs)  # noqa: E501
        else:
            (data) = self.pleiades_kv_keys_with_http_info(h_id, **kwargs)  # noqa: E501
            return data

    def pleiades_kv_keys_with_http_info(self, h_id, **kwargs):  # noqa: E501
        """Get all keys (KEYS)  # noqa: E501

        Not Implemented Yet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pleiades_kv_keys_with_http_info(h_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int h_id: KV Storage ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['h_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pleiades_kv_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'h_id' is set
        if ('h_id' not in params or
                params['h_id'] is None):
            raise ValueError("Missing the required parameter `h_id` when calling `pleiades_kv_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'h_id' in params:
            path_params['hID'] = params['h_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/kv/{hID}/field', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
