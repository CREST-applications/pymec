# coding: utf-8

"""
    MEC-RM API

    This is the MEC Recource Manager API specification.  Current Version: v0.5.0.2 (Major: 0.5, Minor: 0, Patch: 2)  As a general-purpose stateless middleware, we have designed this system with a high level of flexibility. There is no predefined API invocation flow in this system. Application developers have the freedom to creatively develop different invocation flows based on their specific needs. In fact, this application-centric flexible development is what we advocate and one of the main driving forces behind our transition from RPC-based APIs to stateless APIs.  The document covers not-fixed fields which may not compatable between versions. (espesilly version change greater than minor version)  For implement of non-published APIs, you can reference the source code by your own responsibility.  ## Documents: * [API Document](https://mecdoc.dolylab.cc/)  # noqa: E501

    OpenAPI spec version: v0.5.0.2
    Contact: nb22509@shibaura-it.ac.jp
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class BlobDataApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def pleiades_data_download(self, d_id, **kwargs):  # noqa: E501
        """Download BLOD data  # noqa: E501

        Download blob data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pleiades_data_download(d_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str d_id: Data ID. This ID should be a valid BLOB data object ID. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pleiades_data_download_with_http_info(d_id, **kwargs)  # noqa: E501
        else:
            (data) = self.pleiades_data_download_with_http_info(d_id, **kwargs)  # noqa: E501
            return data

    def pleiades_data_download_with_http_info(self, d_id, **kwargs):  # noqa: E501
        """Download BLOD data  # noqa: E501

        Download blob data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pleiades_data_download_with_http_info(d_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str d_id: Data ID. This ID should be a valid BLOB data object ID. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['d_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pleiades_data_download" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'd_id' is set
        if ('d_id' not in params or
                params['d_id'] is None):
            raise ValueError("Missing the required parameter `d_id` when calling `pleiades_data_download`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'd_id' in params:
            path_params['dID'] = params['d_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/data/{dID}/blob', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pleiades_data_meta(self, d_id, **kwargs):  # noqa: E501
        """Get meta data of a BLOB data object  # noqa: E501

        Get meta data of a BLOB data object.  This endpoint can be used to check if a BLOB data object is exist.  The return values of this API may contain fields that have not been mentioned in the documentation. These fields could be experimental or deprecated fields that are subject to change. Developers should ignore the presence of these fields.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pleiades_data_meta(d_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str d_id: Data ID. This ID should be a valid BLOB data object ID. (required)
        :return: ResponseDataMeta
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pleiades_data_meta_with_http_info(d_id, **kwargs)  # noqa: E501
        else:
            (data) = self.pleiades_data_meta_with_http_info(d_id, **kwargs)  # noqa: E501
            return data

    def pleiades_data_meta_with_http_info(self, d_id, **kwargs):  # noqa: E501
        """Get meta data of a BLOB data object  # noqa: E501

        Get meta data of a BLOB data object.  This endpoint can be used to check if a BLOB data object is exist.  The return values of this API may contain fields that have not been mentioned in the documentation. These fields could be experimental or deprecated fields that are subject to change. Developers should ignore the presence of these fields.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pleiades_data_meta_with_http_info(d_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str d_id: Data ID. This ID should be a valid BLOB data object ID. (required)
        :return: ResponseDataMeta
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['d_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pleiades_data_meta" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'd_id' is set
        if ('d_id' not in params or
                params['d_id'] is None):
            raise ValueError("Missing the required parameter `d_id` when calling `pleiades_data_meta`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'd_id' in params:
            path_params['dID'] = params['d_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/data/{dID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseDataMeta',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pleiades_data_upload(self, **kwargs):  # noqa: E501
        """Upload BLOB data  # noqa: E501

        Use this endpoint to upload new BLOB (Binary Large OBject)  This endpoint will give the uploaded BLOB object an globally unique identifier. Currently this globally unique identifier is a 64-bit signed integer, which exhibits a non-strictly monotonic increasing trend over time.  The identifier given by this endpoint will be called `dID` in this system which stands for \"blob **d**ata object **ID**\"  The BLOB data object has   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pleiades_data_upload(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file:
        :return: ResponseDataUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pleiades_data_upload_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.pleiades_data_upload_with_http_info(**kwargs)  # noqa: E501
            return data

    def pleiades_data_upload_with_http_info(self, **kwargs):  # noqa: E501
        """Upload BLOB data  # noqa: E501

        Use this endpoint to upload new BLOB (Binary Large OBject)  This endpoint will give the uploaded BLOB object an globally unique identifier. Currently this globally unique identifier is a 64-bit signed integer, which exhibits a non-strictly monotonic increasing trend over time.  The identifier given by this endpoint will be called `dID` in this system which stands for \"blob **d**ata object **ID**\"  The BLOB data object has   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pleiades_data_upload_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file:
        :return: ResponseDataUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pleiades_data_upload" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/data', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseDataUpload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
