# coding: utf-8

"""
    MEC-RM API

    This is the MEC Recource Manager API specification.  Current Version: v0.5.0.2 (Major: 0.5, Minor: 0, Patch: 2)  As a general-purpose stateless middleware, we have designed this system with a high level of flexibility. There is no predefined API invocation flow in this system. Application developers have the freedom to creatively develop different invocation flows based on their specific needs. In fact, this application-centric flexible development is what we advocate and one of the main driving forces behind our transition from RPC-based APIs to stateless APIs.  The document covers not-fixed fields which may not compatable between versions. (espesilly version change greater than minor version)  For implement of non-published APIs, you can reference the source code by your own responsibility.  ## Documents: * [API Document](https://mecdoc.dolylab.cc/)  # noqa: E501

    OpenAPI spec version: v0.5.0.2
    Contact: nb22509@shibaura-it.ac.jp
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RequestWorkerContract(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'extra_tag': 'list[str]',
        'worker_id': 'str',
        'timeout': 'int'
    }

    attribute_map = {
        'extra_tag': 'extra_tag',
        'worker_id': 'worker_id',
        'timeout': 'timeout'
    }

    def __init__(self, extra_tag=None, worker_id=None, timeout=None):  # noqa: E501
        """RequestWorkerContract - a model defined in Swagger"""  # noqa: E501
        self._extra_tag = None
        self._worker_id = None
        self._timeout = None
        self.discriminator = None
        if extra_tag is not None:
            self.extra_tag = extra_tag
        if worker_id is not None:
            self.worker_id = worker_id
        if timeout is not None:
            self.timeout = timeout

    @property
    def extra_tag(self):
        """Gets the extra_tag of this RequestWorkerContract.  # noqa: E501

        Extra tag list (only for this request).  # noqa: E501

        :return: The extra_tag of this RequestWorkerContract.  # noqa: E501
        :rtype: list[str]
        """
        return self._extra_tag

    @extra_tag.setter
    def extra_tag(self, extra_tag):
        """Sets the extra_tag of this RequestWorkerContract.

        Extra tag list (only for this request).  # noqa: E501

        :param extra_tag: The extra_tag of this RequestWorkerContract.  # noqa: E501
        :type: list[str]
        """

        self._extra_tag = extra_tag

    @property
    def worker_id(self):
        """Gets the worker_id of this RequestWorkerContract.  # noqa: E501

        Worker ID. This ID should be an 64-bit signed integer. since JSON is not able to handle 64-bit unsigned integer, use string instead.  # noqa: E501

        :return: The worker_id of this RequestWorkerContract.  # noqa: E501
        :rtype: str
        """
        return self._worker_id

    @worker_id.setter
    def worker_id(self, worker_id):
        """Sets the worker_id of this RequestWorkerContract.

        Worker ID. This ID should be an 64-bit signed integer. since JSON is not able to handle 64-bit unsigned integer, use string instead.  # noqa: E501

        :param worker_id: The worker_id of this RequestWorkerContract.  # noqa: E501
        :type: str
        """

        self._worker_id = worker_id

    @property
    def timeout(self):
        """Gets the timeout of this RequestWorkerContract.  # noqa: E501

        Maximum timeout in seconds. This value should be an 32-bit signed integer. Note that the RM will return the result before the timeout even if no job is available. The real timeout will be less then the minimum of this value and the RM side global timeout.  # noqa: E501

        :return: The timeout of this RequestWorkerContract.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this RequestWorkerContract.

        Maximum timeout in seconds. This value should be an 32-bit signed integer. Note that the RM will return the result before the timeout even if no job is available. The real timeout will be less then the minimum of this value and the RM side global timeout.  # noqa: E501

        :param timeout: The timeout of this RequestWorkerContract.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestWorkerContract, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestWorkerContract):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
