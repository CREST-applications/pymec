# coding: utf-8

"""
    MEC-RM API

    This is the MEC Recource Manager API specification.  Current Version: v0.5.0.2 (Major: 0.5, Minor: 0, Patch: 2)  As a general-purpose stateless middleware, we have designed this system with a high level of flexibility. There is no predefined API invocation flow in this system. Application developers have the freedom to creatively develop different invocation flows based on their specific needs. In fact, this application-centric flexible development is what we advocate and one of the main driving forces behind our transition from RPC-based APIs to stateless APIs.  The document covers not-fixed fields which may not compatable between versions. (espesilly version change greater than minor version)  For implement of non-published APIs, you can reference the source code by your own responsibility.  ## Documents: * [API Document](https://mecdoc.dolylab.cc/)  # noqa: E501

    OpenAPI spec version: v0.5.0.2
    Contact: nb22509@shibaura-it.ac.jp
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RequestJobCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'input_id': 'str',
        'functio': 'str',
        'extra_tag': 'list[str]'
    }

    attribute_map = {
        'input_id': 'input_id',
        'functio': 'functio',
        'extra_tag': 'extra_tag'
    }

    def __init__(self, input_id=None, functio=None, extra_tag=None):  # noqa: E501
        """RequestJobCreate - a model defined in Swagger"""  # noqa: E501
        self._input_id = None
        self._functio = None
        self._extra_tag = None
        self.discriminator = None
        if input_id is not None:
            self.input_id = input_id
        if functio is not None:
            self.functio = functio
        if extra_tag is not None:
            self.extra_tag = extra_tag

    @property
    def input_id(self):
        """Gets the input_id of this RequestJobCreate.  # noqa: E501

        Input data ID.  This ID should be a valid BLOB data object ID (aka, `dID`)  This ID should be an 64-bit signed integer. Since JSON is not able to handle 64-bit unsigned integer, use string instead.  # noqa: E501

        :return: The input_id of this RequestJobCreate.  # noqa: E501
        :rtype: str
        """
        return self._input_id

    @input_id.setter
    def input_id(self, input_id):
        """Sets the input_id of this RequestJobCreate.

        Input data ID.  This ID should be a valid BLOB data object ID (aka, `dID`)  This ID should be an 64-bit signed integer. Since JSON is not able to handle 64-bit unsigned integer, use string instead.  # noqa: E501

        :param input_id: The input_id of this RequestJobCreate.  # noqa: E501
        :type: str
        """

        self._input_id = input_id

    @property
    def functio(self):
        """Gets the functio of this RequestJobCreate.  # noqa: E501

        Function ID.  This ID should be a valid lambda functione object ID (aka, `fID`) This ID should be an 64-bit signed integer. since JSON is not able to handle 64-bit unsigned integer, use string instead.  # noqa: E501

        :return: The functio of this RequestJobCreate.  # noqa: E501
        :rtype: str
        """
        return self._functio

    @functio.setter
    def functio(self, functio):
        """Sets the functio of this RequestJobCreate.

        Function ID.  This ID should be a valid lambda functione object ID (aka, `fID`) This ID should be an 64-bit signed integer. since JSON is not able to handle 64-bit unsigned integer, use string instead.  # noqa: E501

        :param functio: The functio of this RequestJobCreate.  # noqa: E501
        :type: str
        """

        self._functio = functio

    @property
    def extra_tag(self):
        """Gets the extra_tag of this RequestJobCreate.  # noqa: E501

        Extra tag list.  The tag that the lambda function object hold will automatically applied to the Job object. This field is used to append extra tags that not given by function object.  This object should be an array of strings.  Tags are defaultly treated as suggested tag, which means the more tags matched, the higher score the worker will be given. The suggested tag will only be used to calculate the worker score, the system will not insure that all tags are matched.  (Not Implemented Yet) Put a `+` character at the begining of the tag will transfer it into a Necessary tag. which will be treated as same as what runtime do.  (Not Implemented Yet) Put a `-` character at the begining of the tag string will transfer it into a Reject tag. If worker contains any of the reject tags, the worker will not be matched.  # noqa: E501

        :return: The extra_tag of this RequestJobCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._extra_tag

    @extra_tag.setter
    def extra_tag(self, extra_tag):
        """Sets the extra_tag of this RequestJobCreate.

        Extra tag list.  The tag that the lambda function object hold will automatically applied to the Job object. This field is used to append extra tags that not given by function object.  This object should be an array of strings.  Tags are defaultly treated as suggested tag, which means the more tags matched, the higher score the worker will be given. The suggested tag will only be used to calculate the worker score, the system will not insure that all tags are matched.  (Not Implemented Yet) Put a `+` character at the begining of the tag will transfer it into a Necessary tag. which will be treated as same as what runtime do.  (Not Implemented Yet) Put a `-` character at the begining of the tag string will transfer it into a Reject tag. If worker contains any of the reject tags, the worker will not be matched.  # noqa: E501

        :param extra_tag: The extra_tag of this RequestJobCreate.  # noqa: E501
        :type: list[str]
        """

        self._extra_tag = extra_tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestJobCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestJobCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
